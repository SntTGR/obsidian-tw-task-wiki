import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import esbuildSvelte from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";
import fs from 'node:fs/promises';
import path from 'node:path';

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const buildDestination = process.env.BUILD_DESTINATION ? path.resolve(process.env.BUILD_DESTINATION) : null;
const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	plugins: [
		esbuildSvelte({
			compilerOptions: { css: true },
			preprocess: sveltePreprocess(),
		}),
		{
			name: 'copyToDist',
			setup(build) {
				build.onEnd(() => {
					if (!buildDestination) return;

					const mainJS = path.resolve("main.js");
					const manifestJSON = path.resolve("manifest.json");

					Promise.all([
						fs.copyFile(mainJS, path.resolve(buildDestination, "main.js")),
						fs.copyFile(manifestJSON, path.resolve(buildDestination, "manifest.json")),
					]).then(() => {
						console.log(`Copied build ${buildDestination}`);
					}).catch((error) => {
						console.error(`Error copying files to ${buildDestination}: ${error}`);
					})
				})
			}
		}
	],
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}